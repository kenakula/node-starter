openapi: 3.0.0
info:
  title: Sample API
  description: Nodejs starter API
  version: 0.1.9
servers:
  - url: http://localhost:4000/api/v1
    description: Local dev server

paths:
  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      operationId: getUsers
      tags:
        - users
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  status:
                    enum:
                      - 'success'
                      - 'error'
                  count:
                    type: integer
  /users/{id}:
    get:
      summary: returns a user object
      operationId: getUser
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  status:
                    $ref: '#/components/schemas/Status'

    post:
      summary: creates a user and returns a user object
      operationId: createUser
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  status:
                    $ref: '#/components/schemas/Status'

    patch:
      summary: updates a user and returns a user object
      operationId: updateUser
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  status:
                    $ref: '#/components/schemas/Status'

    delete:
      summary: deletes user
      operationId: deleteUser
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user id
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    $ref: '#/components/schemas/Status'

  /auth/signup:
    post:
      summary: signs up user
      operationId: signUp
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@test.com
                password:
                  type: string
                passwordConfirm:
                  type: string
      responses:
        '201':
          description: Successfully signup
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      refreshToken:
                        type: string
                  status:
                    $ref: '#/components/schemas/Status'
                  message:
                    type: string

  /auth/login:
    post:
      summary: logins user
      operationId: logIn
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 'Successfull login'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResult'

  /auth/refresh:
    post:
      summary: 'Refreshes auth tokens'
      operationId: refreshTokens
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    refreshToken:
                      type: string
                status:
                  $ref: '#/components/schemas/Status'
                message:
                  type: string
      responses:
        '200':
          description: 'Successfully refreshed token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResult'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          example: 'user@user.com'
        role:
          enum:
            - 'user'
            - 'admin'
          description: 'user or admin'
          default: 'user'
        emailConfirmed:
          type: boolean
          default: false

    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    LoginResult:
      type: object
      properties:
        data:
          type: object
          properties:
            refreshToken:
              type: string
        message:
          type: string
        status:
          type: string
          enum:
            - 'success'
            - 'error'


    Status:
      enum:
        - 'success'
        - 'error'
